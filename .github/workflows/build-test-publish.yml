name: Build, Test, Publish
on:
  - push

defaults:
  run:
    working-directory: src

jobs:
  build:
    name: Build and Test
    runs-on: macos-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: true

    outputs:
      is-release: ${{ steps.get-version.outputs.is-release }}
      version: ${{ steps.get-version.outputs.version }}
    
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set version
        uses: actions/github-script@v3.1.0
        id: get-version
        with:
          script: |
            const fs = require('fs');

            const projFile = 'src/triaxis.Xamarin.BluetoothLE/triaxis.Xamarin.BluetoothLE.csproj';
            let projLines = fs.readFileSync(projFile, 'utf8').split('\n');
            let verLine = 0;
            let ver = '';

            for (let i = 0; i < projLines.length; i++) {
              const trimmed = projLines[i].trim();
              if (trimmed.startsWith("<Version>") && trimmed.endsWith("</Version>")) {
                verLine = i;
                ver = trimmed.slice(9, -10)
                console.log(`Found project version ${ver} at line ${verLine}`)
                break;
              }
            }

            const versionTag = context.ref.startsWith('refs/tags/v')
            if (versionTag) {
              ver = context.ref.split('/')[2].substring(1)
            } else {
              ver += `-g${context.sha.substring(0, 8)}`
            }
            console.log(`Setting version: ${ver}`)
            projLines[verLine] = `<Version>${ver}</Version>`
            fs.writeFileSync(projFile, projLines.join('\n'))

            core.setOutput('is-release', context.payload.base_ref == 'refs/heads/master')
            core.setOutput('version', ver)

      - name: Restore NuGet Packages
        run: dotnet restore

      - name: Build
        run: msbuild /t:build /p:Configuration=Release

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: src/triaxis.Xamarin.BluetoothLE/bin/Release/*nupkg

      - name: Test
        run: dotnet test --no-build -c Release -v Normal -l "junit;logFilePath=test-results.xml"

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: src/**/test-results.xml

  publish-test-results:
    name: Publish test results
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Fetch Test Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-results

      - name: Publish Test Results
        uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:latest
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: '**/test-results.xml'  

  publish-nuget:
    name: Publish NuGet
    runs-on: macos-latest
    env:
      DOTNET_NOLOGO: true
    needs: build
    if: needs.build.outputs.is-release == 'true'
    steps:
      - name: Fetch Package Artifacts
        uses: actions/download-artifact@v2
        with:
          name: packages
          path: src

      - name: Publish NuGet Packages
        run: dotnet nuget push *.nupkg -s nuget.org -k ${{secrets.NUGET_API_KEY}} --skip-duplicate
